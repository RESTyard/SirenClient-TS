// error with details mapping from RFC7807
// "application/problem+json" media type

export interface ProblemDetailsErrorParams {
    // A URI reference  that identifies the problem type.
    type?: string,

    // A short, human-readable summary of the problem type.
    title?: string,

    // A human-readable explanation specific to this occurrence of the problem.
    detail?: string,

    // The HTTP status code generated by the origin server for this occurrence of the problem.
    status?: number,

    //  A URI reference that identifies the specific occurrence of the problem.
    instance?: string,

    // response object or object describing the error
    rawObject?: any
}
export class ProblemDetailsError implements Error {
    constructor(parameters?: ProblemDetailsErrorParams) {
        if (!parameters) {
            return;
        }

        if (parameters.type) {
            this.type = parameters.type;
        }
        if (parameters.title) {
            this.title = parameters.title;
        }
        if (parameters.detail) {
            this.detail = parameters.detail;
        }

        if (parameters.status) {
            this.status = parameters.status;
        }
        if (parameters.instance) {
            this.instance = parameters.instance;
        }

        if (parameters.rawObject) {
            this.rawObject = parameters.rawObject;
        }
    };

    // A URI reference  that identifies the problem type.
    type: string = "";

    // A short, human-readable summary of the problem type.
    title: string = "";

    // A human-readable explanation specific to this occurrence of the problem.
    detail: string = "";

    // The HTTP status code generated by the origin server for this occurrence of the problem.
    status: number = 0;

    //  A URI reference that identifies the specific occurrence of the problem.
    instance: string = "";

    // response object or object describing the error
    rawObject?: any = null;

    // mapped to type
    get name(): string {
        return this.type ? this.type : "";
    }

    // mapped to title
    get message(): string {
        return this.title ? this.title : "";
    }
    stack?: string | undefined;

    FromJson(json: string): ProblemDetailsError {
        var jsonObj = JSON.parse(json);

        if (jsonObj.type) {
            this.type = jsonObj.type;
        }

        if (jsonObj.title) {
            this.type = jsonObj.title;
        }

        if (jsonObj.detail) {
            this.type = jsonObj.detail;
        }

        if (jsonObj.status) {
            this.type = jsonObj.status;
        }

        if (jsonObj.instance) {
            this.type = jsonObj.instance;
        }

        return this;
    }
}